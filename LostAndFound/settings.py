"""
Django settings for LostAndFound project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
from pathlib import Path
import os
import json
import dj_database_url
import sys

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# Disabled automatically if DEVELOPMENT_MODE is True
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'lost-and-found-a26-515dd2d8d5a8.herokuapp.com']

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

INSTALLED_APPS = [
    'authentication.apps.AuthenticationConfig',
    'whitenoise.runserver_nostatic',
    'django.contrib.sites',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_bootstrap5',
    'storages',
    'items',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

AUTH_USER_MODEL = "authentication.User"
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_CHANGE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_UNIQUE_EMAIL = True

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            "client_id": os.environ.get('GOOGLE_ALLAUTH_CLIENT_ID'),
            "secret": os.environ.get('GOOGLE_ALLAUTH_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'EMAIL_AUTHENTICATION': True,
    }
}

SITE_ID = 1

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

ROOT_URLCONF = 'LostAndFound.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'LostAndFound.wsgi.application'

DATABASES = {}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/New_York'
USE_I18N = True
USE_TZ = True

# AWS S3 Set up
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = 'lostandfound-bkt-0'
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
AWS_DEFAULT_ACL = None
AWS_S3_FILE_OVERWRITE = False  # Make sure it doesn't overwrite files with the same names
# Define custom object parameters
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=43200', 
}

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STORAGES = {
    # Media files (image) management
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage"
    },

    # CSS and JS file management
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage", # Main way of storing static files in development and production 
        # "BACKEND": "storages.backends.s3boto3.S3Boto3Storage" # Previous storage but ran into too many problems with collectstatic
        # "BACKEND": "django.core.files.storage.FileSystemStorage" # Creates the storage but doesn't serve static files to templates
    },
}

WHITENOISE_KEEP_ONLY_HASHED_FILES = True

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

try:
    if 'HEROKU' in os.environ:
        import django_heroku

        django_heroku.settings(locals())
except ImportError:
    found = False

if 'test' in sys.argv or 'test_coverage' in sys.argv or "CI" in os.environ:  # Covers regular testing and django-coverage
    DEBUG = False

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

    SECRET_KEY = "TESTINGSECRETKEY"

    # Use local file storage for testing
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
            "OPTIONS": {"location": os.path.join(BASE_DIR, "media")}
        },
        "staticfiles": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
            "OPTIONS": {"location": os.path.join(BASE_DIR, "static")}
        }
    }

elif "DYNO" in os.environ:
    DEBUG = False

    DATABASES = {
        'default': dj_database_url.config(
                conn_max_age=600,
                conn_health_checks=True,
                ssl_require=True
        ),
    }

else:
    try:
        file = open('ProjectKeys.json')
        data = json.load(file)

        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }

        SECRET_KEY = data['DJANGO_SECRET_KEY']

        SOCIALACCOUNT_PROVIDERS['google']['APP']['client_id'] = data['GoogleOAuth']['client_id']
        SOCIALACCOUNT_PROVIDERS['google']['APP']['secret'] = data['GoogleOAuth']['secret']

        AWS_ACCESS_KEY_ID = data['S3']['AWS_ACCESS_KEY_ID']
        AWS_SECRET_ACCESS_KEY = data['S3']['AWS_SECRET_ACCESS_KEY']

        file.close()

    except Exception as e:
        print("An error occurred when setting up local variables. Check settings.py.")
        print(e)

